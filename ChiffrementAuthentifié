import codecs

##########################################################################################
#                                    MIDORI                                              #
##########################################################################################

sbox = [0xc, 0xa, 0xd, 0x3, 0xe, 0xb, 0xf, 0x7, 0x8, 0x9, 0x1, 0x5, 0x0, 0x2, 0x4, 0x6]

p = [0, 10, 5, 15, 14, 4, 11, 1, 9, 3, 12, 6, 7, 13, 2, 8]
invP = [0, 7, 14, 9, 5, 2, 11, 12, 15, 8, 1, 6, 10, 13, 4, 3]

a0 = [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1]
a1 = [0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0]
a2 = [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1]
a3 = [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1]
a4 = [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1]
a5 = [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0]
a6 = [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0]
a7 = [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0]
a8 = [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1]
a9 = [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0]
a10 = [0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1]
a11 = [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0]
a12 = [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0]
a13 = [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0]
a14 = [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0]
alpha = [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14]


def subCell(mot):
    return sbox[mot]


def subCells(matrice):
    res = [0 for i in range(16)]
    for j in range(16):
        res[j] = subCell(matrice[j])
    return res


def shuffleCells(matrice):
    res = [0 for i in range(16)]
    for i in range(16):
        res[i] = matrice[p[i]]
    return res


def reverseShuffleCells(matrice):
    res = [0 for i in range(16)]
    for i in range(16):
        res[i] = matrice[invP[i]]
    return res


def mixColumn(matrice):
    res = [0 for i in range(16)]
    for i in range(4):
        res[0 + 4 * i] = matrice[1 + 4 * i] ^ matrice[2 + 4 * i] ^ matrice[3 + 4 * i]
        res[1 + 4 * i] = matrice[0 + 4 * i] ^ matrice[2 + 4 * i] ^ matrice[3 + 4 * i]
        res[2 + 4 * i] = matrice[0 + 4 * i] ^ matrice[1 + 4 * i] ^ matrice[3 + 4 * i]
        res[3 + 4 * i] = matrice[0 + 4 * i] ^ matrice[1 + 4 * i] ^ matrice[2 + 4 * i]
    return res


def addKey(matrice, key):
    res = [0 for i in range(16)]
    for i in range(16):
        res[i] = matrice[i] ^ key[i]
    return res


def midori64(m, k):
    wk = addKey(k[0:16], k[16:32])
    rk = [0 for i in range(16)]

    res = addKey(m, wk)
    for i in range(15):
        rk = addKey(k[0 + 16 * (i % 2): 16 + 16 * (i % 2)], alpha[i])
        res = subCells(res)
        res = shuffleCells(res)
        res = mixColumn(res)
        res = addKey(res, rk)
    res = subCells(res)
    res = addKey(res, wk)
    return res


def reverseMidori(m, k):
    wk = addKey(k[0:16], k[16:32])
    rk = [0 for i in range(16)]

    res = addKey(m, wk)
    for i in range(14, -1, -1):
        rk = addKey(k[0 + 16 * (i % 2): 16 + 16 * (i % 2)], alpha[i])
        res = subCells(res)
        res = mixColumn(res)
        res = reverseShuffleCells(res)
        tmpRK = reverseShuffleCells(mixColumn(rk))
        res = addKey(res, tmpRK)
    res = subCells(res)
    res = addKey(res, wk)
    return res

##########################################################################################
#                                     Mode opératoire                                    #
##########################################################################################

def xor(b, c):
    res = []
    for i in range(0, len(b)):
        res.append(b[i] ^ c[i])
    return res

##La cle doit être générée par une fonction de dérivation de clés, à partir d'un mdp (input)
##Pareil pour l'IV et pour la clé du Hash
def CBC(plain, cle, IV):
    msg = []
    block = []
    cpt = 0
    msgChiffre = ""

    for c in plain:
        #print(c)
        hexa = int(hex(ord(c)), base=16)
        high = hexa >> 4
        low = hexa & 0xF
        #print(high)
        #print(low)

        block.append(high)
        block.append(low)
        cpt = cpt + 2

        ##Ajout du block dans le tableau et réinitialisation du block
        if(cpt > 15):
            msg.append(block)
            #print(block)
            block = []
            cpt = 0

    ##Padding
    if(cpt < 15):
        while(cpt < 16):
            block.append(0x0)
            cpt = cpt + 1
        #print(block)
        msg.append(block)

    ##Chiffrement des blocs
    block = IV
    for b in msg:
        block = midori64(xor(b, block), cle)
        for c in block:
            msgChiffre = msgChiffre + hex(c)[2:]
    return msgChiffre.upper()

def reverseCBC(cipher, cle, IV):
    tabBlock = []
    block = []
    final = ""
    cpt = 0

    ##Récupération sous forme de blocs du chiffré
    for c in cipher:
        block.append(int(c, base=16))
        cpt = cpt + 1
        if(cpt > 15):
            tabBlock.append(block)
            block = []
            cpt = 0

    ##A partir d'ici block nous sert de block pour le xor
    blockToXor = IV
    cpt = 0
    tmp = ""
    ##Déchiffrement de chaque bloc avec reverseMidori
    for b in tabBlock:
        block = reverseMidori(b, cle)
        block = xor(block, blockToXor)
        blockToXor = b
        for c in block:
            tmp2 = tmp
            tmp = str(c)
            cpt = cpt + 1
            if(cpt > 1):
                cpt = 0
                if(int(tmp) == 0 & int(tmp2) == 0):
                    break

                if(len(tmp2) > 1 & len(tmp) > 1):
                    tmp = codecs.decode(hex(int(tmp2))[2:] + hex(int(tmp))[2:], "hex").decode('utf-8')
                    print(tmp)
                    final = final + tmp

                if(len(tmp) > 1):
                    tmp = codecs.decode(tmp2 + hex(int(tmp))[2:], "hex").decode('utf-8')
                    print(tmp)
                    final = final + tmp

                elif(len(tmp2) > 1):
                    tmp = codecs.decode(hex(int(tmp2))[2:] + tmp, "hex").decode('utf-8')
                    print(tmp)
                    final = final + tmp

                else:
                    tmp = codecs.decode(tmp2+tmp, "hex").decode('utf-8')
                    print(tmp)
                    final = final + tmp

    return final

##Fonction de dérivation de clé/vecteurs d'initialisation à partir d'un mdp (8 caractères)
##En CBC taille vecteur d'initialisation = taille du bloc

##########################################################################################
#                             Fonction de dérivation de clés                             #
##########################################################################################

key1 = [0x6, 0x8, 0x7, 0xd, 0xe, 0xd, 0x3, 0xb, 0x3, 0xc, 0x8, 0x5, 0xb, 0x3, 0xf, 0x3,
        0x5, 0xb, 0x1, 0x0, 0x0, 0x9, 0x8, 0x6, 0x3, 0xe, 0x2, 0xa, 0x8, 0xc, 0xb, 0xf]

cipher = CBC("salutsava", key1, [0 for i in range(16)])
print(cipher)
dechipher = reverseCBC(cipher, key1, [0 for i in range(16)])
print(dechipher)

#if __name__ == '__main__':
#    msg = input("Entrez le message à chiffrer :")
#    print(msg)
#    passwd = input("Entrez un mot de passe :")
